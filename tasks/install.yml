---

- name: ensure deployment user for ansible_docker_pihole
  user:
    name: "{{ ph_user }}"
    state: "{{ ph_state | default('present') }}"
    create_home: true
    uid: "{{ ph_user_id }}"
    shell: /bin/bash

- name: Ensure user is added to the docker group.
  user:
    name: "{{ ph_user }}"
    groups: docker
    append: true

# Issues with docker python package >=7.0.0
# https://github.com/docker/docker-py/releases/tag/7.0.0
# https://github.com/docker/docker-py/issues/3194
- name: legacy | Ensure docker python packages compose v1
  pip:
    name:
      - docker==6.1.3
      - docker-compose
  become: true
  become_user: "{{ ph_user }}"
  when: compose_v1

- name: Install Docker dependencies for modules
  apt:
    name:
      - python3-docker
      - python3-requests
    update_cache: true
  become: true
  when: not compose_v1

- name: Ensure repository paths are present
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ph_user }}"
  loop:
   - "{{ repository_src }}"
   - "{{ repository_src }}/scripts"

- name: ensure external network exists
  community.docker.docker_network:
    name: "{{ ph_ext_net }}"
    driver: bridge
    attachable: true
    state: present

- name: Check if docker-compose.yml exists
  stat:
    path: "{{ repository_src }}/docker-compose.yml"
  register: compose

- name: test docker-compose changed
  template:
    src: "docker-compose.yml"
    dest: "{{ repository_src }}/docker-compose.yml"
    owner: "{{ ph_user }}"
    mode: "600"
  check_mode: true
  register: repo_copy_test
  when: compose.stat.exists

- name: legacy | Stop services since compose has changed
  community.docker.docker_compose:
    project_name: "{{ ph_project_name }}"
    project_src: "{{ repository_src }}"
    state: absent
    files:
      - docker-compose.yml
  become_user: "{{ ph_user }}"
  when:
  - compose_v1
  - not ph_remove
  - compose.stat.exists
  - repo_copy_test.changed

- name: Stop services since compose has changed
  community.docker.docker_compose_v2:
    project_name: "{{ ph_project_name }}"
    project_src: "{{ repository_src }}"
    state: absent
    files:
      - docker-compose.yml
  become_user: "{{ ph_user }}"
  when:
  - not compose_v1
  - not ph_remove
  - compose.stat.exists
  - repo_copy_test.changed

- name: Copy docker-compose.yml
  template:
    src: "docker-compose.yml"
    dest: "{{ repository_src }}/docker-compose.yml"
    owner: "{{ ph_user }}"
    mode: "600"
  register: repo_copy

- name: Run pre-start commands
  command: "{{ item }}"
  loop: "{{ ph_pre_startup_commands }}"
  become_user: "{{ ph_user }}"

- name: legacy | Ensure services are {{ ph_state }}
  community.docker.docker_compose:
    project_name: "{{ ph_project_name }}"
    project_src: "{{ repository_src }}"
    debug: true
    state: "{{ ph_state }}"
    build: false
    files:
      - docker-compose.yml
  become_user: "{{ ph_user }}"
  when:
    - compose_v1
    - not ph_remove

# Requires community.docker >= 3.8.0. ansible-galaxy does not handle collection dependencies in roles meta/main.yml
- name: Ensure services are {{ ph_state }}
  community.docker.docker_compose_v2:
    project_name: "{{ ph_project_name }}"
    project_src: "{{ repository_src }}"
    state: "{{ ph_state }}"
    build: never
    files:
      - docker-compose.yml
  become_user: "{{ ph_user }}"
  when:
    - not compose_v1
    - not ph_remove

- name: Run post-shutdown commands
  command: "{{ item }}"
  loop: "{{ ph_post_shutdown_commands }}"
  become_user: "{{ ph_user }}"

- name: Put auto-update script
  copy:
    content: |
      #!/usr/bin/env bash
      
      set - eu
      cd {{ repository_src }}
      docker compose pull
      docker compose up -d

    dest: "{{ repository_src }}/autoupdate.sh"
    owner: "{{ ph_user }}"
    mode: "770"
  when: ph_auto_update

- name: Set auto-update cron to {{ cron_state }}
  cron:
    name: update all services for ansible_docker_pihole
    job: "{{ repository_src }}/autoupdate.sh"
    hour: "{{ ph_auto_update_cron_hour }}"
    minute: "{{ ph_auto_update_cron_minute }}"
    weekday: "{{ ph_auto_update_cron_weekday }}"
    month: "{{ ph_auto_update_cron_month }}"
    user: "{{ ph_user }}"
    state: "{{ cron_state }}"
  become_user: "{{ ph_user }}"
  vars:
    cron_state: "{{ 'present' if ph_auto_update else 'absent' }}"
